require("keybindings.lua")

function changePen(size, color)
    print("Chaning pen to have size " .. size .. " and color " .. color)
      app.changeToolColor({ color = color, tool = "pen", selection = true })
      app.uiAction({ action = "ACTION_TOOL_PEN" })
      app.uiAction({ action = "ACTION_TOOL_PEN_SIZE_" .. size })
end

-- If AllEnabled is false, all of shortcuts apart from the toggle are disabled
AllEnabled = true
function toggleEnabled()
  AllEnabled = not AllEnabled
  if AllEnabled then
    print("Shortcuts enabled")
  else
    print("Shortcuts disabled")
  end
end

function getAction(action)
  return "ACTION_" .. action
end

-- unique_name and Cycle + unique_name must not exist as globals
function generateCycleFunction(values, unique_name)
  local global_name = "g_" .. unique_name
  local func = global_name .. " = 0; " ..
               unique_name .. " = function() "  ..
               "local table = {"

  for _, v in pairs(values) do
    if type(v) == "string" then
      func = func .. '{ action = "' .. getAction(v) .. '", enabled = true }, '
    else
      func = func .. '{ action = "' .. getAction(v[1]) .. '", enabled =' .. tostring(v[2]) .. '}, '
    end
  end

  func = func .. "}; " .. " if AllEnabled then app.uiAction(table[".. global_name .." + 1]); " ..
         global_name .. " = (" .. global_name .. " + 1) % " .. tostring(#values) .. " end end"

  local define = load(func)

  if define then define() else print("Your autogenerated function failed... :( => \n".. func) end
end

function initUi()
  local index = 1

  for shortcut, action in pairs(Mappings.actions) do
    local func_name = "action" .. tostring(index)
    local decl = func_name
              .. ' = function() if AllEnabled then app.uiAction({ action = "'
              .. getAction(action) .. '", enabled = true}) end end'

    local defineFunc = load(decl)

    if defineFunc == nil then
      print("Your autogenerated function failed... :( => \n".. decl)
      goto continue
    end

    defineFunc()

    app.registerUi({
      menu = "Perform" .. action,
      callback = func_name,
      accelerator = shortcut
    });

    ::continue::

    index = index + 1
  end

  index = 1
  for shortcut, value in pairs(Mappings.cycle) do
    local func = "cycle" .. tostring(index)
    generateCycleFunction(value, func)

    app.registerUi({
      menu = "Cycle through stuff",
      callback = func,
      accelerator = shortcut,
    })

    index = index + 1
  end

  index = 1
  for shortcut in pairs(Mappings.raw) do
    local func_name = "raw" .. tostring(index)
    local decl = func_name .. " = function() if AllEnabled then " ..
                 "Mappings.raw['" .. shortcut .. "']() end end"

    local define = load(decl)
    if define then define() else print("Your autogenerated function failed... :( => \n".. decl) end

    app.registerUi({
      menu = "A function... sorry",
      callback = func_name,
      accelerator = shortcut
    })

    index = index + 1
  end

  app.registerUi({
    menu = "Toggle shortcuts enabled",
    callback = "toggleEnabled",
    accelerator = "Tab"
  })

end

